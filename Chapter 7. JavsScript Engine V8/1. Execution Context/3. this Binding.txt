this 바인딩은 JavaScript에서 주로 실행 컨텍스트(Execution Context)에 의해 결정됩니다. 실행 컨텍스트는 함수 호출 방식에 따라 this가 가리키는 객체를 결정합니다.

1. 전역 컨텍스트
전역 컨텍스트에서 this는 전역 객체를 가리킵니다. 브라우저 환경에서는 window, Node.js 환경에서는 global 객체를 가리킵니다.

console.log(this); // 브라우저에서는 window, Node.js에서는 global


2. 함수 호출
일반 함수 호출에서는 this는 전역 객체를 가리킵니다(엄격 모드가 아닌 경우). 엄격 모드에서는 undefined를 가리킵니다.


function foo() {
    console.log(this);
}
foo(); // 브라우저에서는 window, 엄격 모드에서는 undefined


3. 메서드 호출
객체의 메서드로 호출될 때 this는 해당 메서드를 호출한 객체를 가리킵니다.

const obj = {
    method: function() {
        console.log(this);
    }
};
obj.method(); 

4. 생성자 호출
생성자 함수로 호출될 때 this는 새로 생성된 객체를 가리킵니다.

function Person(name) {
    this.name = name;
}
const person = new Person('Alice');
console.log(person.name); // Alice

5. call, apply, bind
call, apply, bind 메서드를 사용하여 this 값을 명시적으로 설정할 수 있습니다.

function foo() {
    console.log(this);
}

const obj = { value: 42 };
foo.call(obj); // obj를 가리킴
foo.apply(obj); // obj를 가리킴

const boundFoo = foo.bind(obj);
boundFoo(); // obj를 가리킴

6. 화살표 함수와 this 바인딩
화살표 함수는 자신만의 this 바인딩을 가지지 않으며, 주변 렉시컬 컨텍스트의 this를 사용합니다. 이는 실행 컨텍스트에 의존하지 않고, 정의된 위치의 스코프를 따릅니다.

const obj = {
    value: 42,
    method: function() {
        const arrowFunc = () => {
            console.log(this);
        };
        arrowFunc();
    }
};
obj.method(); // obj를 가리킴



avaScript의 Lexical Scope(어휘적 스코프) 개념은 자바(Java)의 **정적 스코프(Static Scope)**와 유사합니다. 두 언어 모두에서 변수를 찾는 범위가 코드가 작성된 시점의 구조에 따라 결정되며, 실행 시점에 영향을 받지 않습니다.

Lexical Scope(어휘적 스코프)란?
Lexical Scope는 변수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 스코프입니다. JavaScript에서 함수가 선언될 때, 함수는 자신이 정의된 위치를 기준으로 스코프를 갖게 됩니다. 이는 함수가 어디에서 호출되든 관계없이, 함수 내부에서 참조하는 변수는 함수가 정의된 위치에서의 스코프 체인을 따릅니다.


function outerFunction() {
    let outerVar = 'I am outside!';

    function innerFunction() {
        console.log(outerVar); // 'I am outside!'
    }

    return innerFunction;
}

const closureFunction = outerFunction();
closureFunction(); // 'I am outside!'

이 예제에서 innerFunction은 outerFunction 내에서 정의되었기 때문에 outerFunction의 스코프를 기억하고 있습니다. 따라서 closureFunction을 호출하면 outerVar에 접근할 수 있습니다.


자바는 정적 스코프를 사용하여 변수의 유효 범위를 결정합니다. 
자바에서 변수의 유효 범위는 변수 선언 위치에 따라 결정되며, 메서드나 클래스가 호출될 때가 아니라 선언될 때의 스코프를 따릅니다.

public class Main {
    static String outerVar = "I am outside!";

    public static void main(String[] args) {
        InnerClass inner = new InnerClass();
        inner.innerMethod();
    }

    static class InnerClass {
        void innerMethod() {
            System.out.println(outerVar); // 'I am outside!'
        }
    }
}


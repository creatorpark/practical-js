`DOMContentLoaded` 이벤트와 `load` 이벤트는 둘 다 웹 페이지가 로드되는 과정에서 발생하지만, 발생 시점과 목적이 다릅니다.

### `DOMContentLoaded` 이벤트
`DOMContentLoaded` 이벤트는 HTML 문서의 기본 구조(DOM)가 완전히 로드되고 파싱된 후에 발생합니다. CSS, 이미지, 서브프레임 등은 모두 로드될 필요가 없습니다.

- **발생 시점**: HTML 문서가 완전히 파싱되어 DOM 트리가 완성된 후.
- **의미**: DOM이 완전히 준비되어 JavaScript 코드가 DOM 요소에 접근하고 조작할 수 있는 상태가 됨.
- **사용 예시**: 초기화 작업, DOM 조작 작업 등.

```javascript
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded and parsed');
    // DOM 조작 작업
});
```

### `load` 이벤트
`load` 이벤트는 페이지의 모든 리소스(이미지, 스타일시트, 서브프레임 등)가 모두 로드된 후에 발생합니다.

- **발생 시점**: HTML 문서와 모든 관련 리소스가 완전히 로드된 후.
- **의미**: 페이지의 모든 콘텐츠가 준비되어 사용자와 상호작용할 수 있는 상태가 됨.
- **사용 예시**: 페이지의 모든 리소스가 로드된 후 실행해야 하는 작업, 예를 들어 애니메이션 시작, 광고 로드 등.

```javascript
window.addEventListener('load', function() {
    console.log('Page fully loaded');
    // 모든 리소스가 로드된 후 실행할 작업
});
```

### 요약

- **`DOMContentLoaded` 이벤트**:
  - HTML 문서의 기본 구조(DOM)가 완전히 로드되고 파싱된 후 발생.
  - CSS, 이미지 등은 로드되지 않아도 됨.
  - 주로 초기화 작업이나 DOM 조작 작업에 사용.
  
- **`load` 이벤트**:
  - HTML 문서와 모든 리소스(이미지, 스타일시트 등)가 완전히 로드된 후 발생.
  - 페이지의 모든 콘텐츠가 준비된 상태에서 실행해야 하는 작업에 사용.

둘 중 어느 이벤트를 사용할지는 특정 작업의 필요에 따라 달라집니다. 예를 들어, DOM 요소를 조작하려면 `DOMContentLoaded` 이벤트가 적합하고, 모든 이미지나 스타일시트가 로드된 후 작업을 실행하려면 `load` 이벤트가 적합합니다.
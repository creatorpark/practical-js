글로벌 스코프(Global Scope): 모든 곳에서 접근 가능한 범위입니다. 전역적으로 선언된 변수와 함수는 전역 스코프에 존재합니다.
함수 스코프(Function Scope): 함수 내에서 선언된 변수는 함수 내부에서만 접근 가능합니다.
블록 스코프(Block Scope): let, const와 함께 사용하는 블록({}) 내에서만 유효한 범위입니다. if, for, while 등의 블록 내에서 유효합니다.
모듈 스코프(Module Scope): ES6 모듈에서 사용되며, 모듈 내부에서 선언된 변수와 함수는 해당 모듈 내에서만 유효합니다.


스코프와 실행 컨텍스트의 관계
1. 스코프 체인(Scope Chain):
실행 컨텍스트는 스코프 체인을 포함합니다. 스코프 체인은 현재 실행 중인 코드의 스코프와 상위 스코프를 순서대로 연결한 목록입니다.
예를 들어, 함수가 호출되면 해당 함수의 실행 컨텍스트가 생성되고, 함수 내부에서 변수나 함수를 참조할 때 이 스코프 체인을 따라 상위 스코프를 검색합니다.

2. 변수 객체(Variable Object):
실행 컨텍스트는 변수 객체를 포함합니다. 변수 객체는 함수의 매개변수, 변수 선언, 함수 선언 등을 저장합니다.
글로벌 실행 컨텍스트의 변수 객체는 전역 객체(window)이고, 함수 실행 컨텍스트의 변수 객체는 함수의 활성화 객체(Activation Object)입니다.

3. this 바인딩(this Binding):
실행 컨텍스트는 this 키워드의 값을 정의합니다. 글로벌 실행 컨텍스트에서 this는 전역 객체를 가리키며, 함수 실행 컨텍스트에서는 호출 방식에 따라 다르게 설정될 수 있습니다.


var a = 10; // 글로벌 스코프

function outer() {
  var b = 20; // 함수 스코프

  function inner() {
    var c = 30; // 함수 스코프
    console.log(a, b, c); // 10, 20, 30
  }

  inner();
}

outer();



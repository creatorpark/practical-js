1. let  
1.1 primitive : Source
- 값을 변경했을 때
let a = 5;
let a = 3;
메모리 번지가 바뀌나? 안바뀌겠지.


1.2 object : Memory
- 참조(주소)를 변경했을 때
let a = {[ price : 100, price : 200]};
let b = a;
let a = {21321312};
a == b?


- 여러번 만들 었을 때
let a = {[ price : 100, price : 200]};
let b = {[ price : 100, price : 200]};
a == b?


2. const
2.1 primitive
- const는 값을 재할당 할 수 없으니..
- 여기서는 이슈가 없다.

2.2 object
- const object의 경우는 주소 포인터(참조)가 변경 되지 않는 다는 것이지
- point 안의 값이 변경되지 않는다는 것은 아니다.
그래서 만들 때 의도를 달성하려면 불변성을 가진 객체로 만드는게 좋다.

object를 불변성으로 만드는 방법은?

*** 그럼 Proxy로 값을 감싸면 얘는 객체 안에 primitive 값을 담는 것이기 때문에
항상 Heap에 저장될 것이다.


